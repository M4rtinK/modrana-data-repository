## ** modRana data repository configuration file ** ##
##

## ** Folders ** ##

## folder for temporary data,p
## used during processing
temporary_folder=temp

## this folder will be initialized into a modRana
## data repository and packages will be copied to it
## once they are processed and packaged
repository_folder=results

## * Queue & Processing pool sizes * ##


## * Monav * ##

## You can use the following variable to set path to the
## Monav preprocessor binary
#monav_preprocessor_path=/usr/bin/monav-preprocessor

## How many threads will each package in the processing pool use
## to run the monav-preprocessor
## NOTE: setting this to anything more than 3 currently doesn't
## add any more threads as there are only 3 runs needed for each package
## (car, bike, pedestrian)
## NOTE2: this basically multiplies per package memory usage by monav_parallel_threads,
## as the processing would be happening at once and not in sequence - take this in account
## when processing large extracts such as France, Germany or Europe - they can take 6+ GB RAM for
## SINGLE pass + there might be other large extracts being processed at the same time
## NOTE3: still, if you can afford this memory wise, you can get a <= 3x speedup
##
#monav_parallel_threads=3

## From what source PBF file size (in MB) should parallel Monav routing data processing
## NOT be used
## - like this, you can run processing of small packages in parallel but large packages
## will run their processing in sequence, lowering worst-case memory requirements
##
#monav_parallel_threshold=1000

## NOTE for monav_parallel_threads & monav_parallel_threshold:
## this does not govern how many package will be processed simultaneously, just internal Monav
## data package processing

## How many threads should the Monav-preprocessor run during the "elimination" phase
## DEFAULT: max(1,cpu_count/4)
## NOTE: total thread count for a SINGLE Monav data package package:
## monav_parallel_threads*monav_preprocessor_threads
## -> as only part of the work done by the monav-preprocessor is multi-threaded
## (that's why monav_parallel_threads exists), overcommiting on monav_preprocessor_threads
## is not that much of an issue
##
#monav_preprocessor_threads=4